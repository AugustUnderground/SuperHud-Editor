<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: wxPropertyGrid 1.3.0 Overview</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex">  <form class="search" action="search.php" method="get">
<a class="qindexHL" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a>  | <span class="search"><u>S</u>earch&nbsp;for&nbsp;<input class="search" type="text" name="query" value="" size="20" accesskey="s"/></span></form></div>
<h1><a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> 1.3.0 Overview </h1>
<p>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is a specialized for editing properties such as strings, numbers, flagsets, fonts, and colours. It allows hierarchial, collapsible properties (via so-called categories that can hold child properties), sub-properties, and has strong wxVariant support.<p>
<b>Documentation for wxPython bindings:</b> For a tutorial see the accompanied wxPython readme file and the test_propgrid.py sample. Otherwise, individual member functions should work very much the same as with the C++ wxWidgets, so you'll probably find <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> and <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> class references handy.<p>
Key Classes:<br>
 <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a><br>
 <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a><br>
 <a class="el" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a><br>
<p>
Header files:<br>
 <b>wx/propgrid/propgrid.h:</b> Mandatory when using <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>.<br>
 <b>wx/propgrid/advprops.h:</b> For less often used property classes.<br>
 <b>wx/propgrid/manager.h:</b> Mandatory when using <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>.<br>
 <b>wx/propgrid/propdev.h:</b> Mandatory when implementing custom property classes.<br>
<p>
<a class="el" href="index.htm#whatsnew">What's new in wxPropertyGrid 1.3?</a><br>
 <a class="el" href="index.htm#basics">Creating and Populating wxPropertyGrid</a><br>
 <a class="el" href="index.htm#categories">Categories</a><br>
 <a class="el" href="index.htm#parentprops">Parent Properties</a> <a class="el" href="index.htm#enumandflags">wxEnumProperty and wxFlagsProperty</a><br>
 <a class="el" href="index.htm#advprops">Specialized Properties</a><br>
 <a class="el" href="index.htm#iterating">Iterating through a property container</a><br>
 <a class="el" href="index.htm#operations">More About Operating with Properties</a><br>
 <a class="el" href="index.htm#events">Event Handling</a><br>
 <a class="el" href="index.htm#populating">Populating wxPropertyGrid Automatically</a><br>
 <a class="el" href="index.htm#cellrender">Customizing Individual Cell Appearance</a><br>
 <a class="el" href="index.htm#customizing">Customizing Properties (without sub-classing)</a><br>
 <a class="el" href="index.htm#custprop">wxCustomProperty</a><br>
 <a class="el" href="index.htm#usage2">Using wxPropertyGridManager</a><br>
 <a class="el" href="index.htm#subclassing">Subclassing wxPropertyGrid and wxPropertyGridManager</a><br>
 <a class="el" href="index.htm#misc">Miscellaneous Topics</a><br>
 <a class="el" href="index.htm#proplist">Property Class Descriptions</a><br>
 <a class="el" href="index.htm#userhelp">Using wxPropertyGrid control</a><br>
 <a class="el" href="index.htm#notes">Design Notes</a><br>
 <a class="el" href="index.htm#newprops">Creating New Properties</a><br>
 <a class="el" href="index.htm#neweditors">Creating Custom Property Editor</a><br>
<h2><a class="anchor" name="whatsnew">
What's new in wxPropertyGrid 1.3?</a></h2>
For comprehensive list of changes and new features, please see the changelog.<p>
For people implementing custom property classes the differences are extensive, so if you are coming from <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> 1.2.x, it is recommended that you take a look.<h2><a class="anchor" name="basics">
Creating and Populating wxPropertyGrid</a></h2>
As seen here, <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is constructed in the same way as other wxWidgets controls:<p>
<pre class="fragment"><div>    <span class="comment">// Necessary header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/propgrid.h&gt;</span>

    ...

        <span class="comment">// Assumes code is in frame/dialog constructor</span>

        <span class="comment">// Construct wxPropertyGrid control</span>
        <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* pg = <span class="keyword">new</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>(
            <span class="keyword">this</span>, <span class="comment">// parent</span>
            PGID, <span class="comment">// id</span>
            wxDefaultPosition, <span class="comment">// position</span>
            wxDefaultSize, <span class="comment">// size</span>
            <span class="comment">// Some specific window styles - for all additional styles,</span>
            <span class="comment">// see Modules-&gt;PropertyGrid Window Styles</span>
            wxPG_AUTO_SORT | <span class="comment">// Automatic sorting after items added</span>
            wxPG_SPLITTER_AUTO_CENTER | <span class="comment">// Automatically center splitter until user manually adjusts it</span>
            <span class="comment">// Default style</span>
            wxPG_DEFAULT_STYLE );

        <span class="comment">// Window style flags are at premium, so some less often needed ones are</span>
        <span class="comment">// available as extra window styles (wxPG_EX_xxx) which must be set using</span>
        <span class="comment">// SetExtraStyle member function. wxPG_EX_HELP_AS_TOOLTIPS, for instance,</span>
        <span class="comment">// allows displaying help strings as tooltips.</span>
        pg-&gt;SetExtraStyle( wxPG_EX_HELP_AS_TOOLTIPS );
</div></pre><p>
(for complete list of new window styles: <a class="el" href="group__wndflags.htm">Additional Window Styles</a>)<p>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is usually populated with lines like this:<p>
<pre class="fragment"><div>        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxStringProperty(wxT(<span class="stringliteral">"Label"</span>),wxT(<span class="stringliteral">"Name"</span>),wxT(<span class="stringliteral">"Initial Value"</span>)) );
</div></pre><p>
Naturally, wxStringProperty is a property class. Only the first function argument (label) is mandatory. Second one, name, defaults to label and, third, the initial value, to default value. If constant wxPG_LABEL is used as the name argument, then the label is automatically used as a name as well (this is more efficient than manually defining both as the same). Empty name is also allowed, but in this case the property cannot be accessed by its name. Note that all property class constructors have pretty much similar constructor argument list.<p>
To demonstrate other common property classes, here's another code snippet:<p>
<pre class="fragment"><div>        <span class="comment">// Add int property</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"IntProperty"</span>), wxPG_LABEL, 12345678) );

        <span class="comment">// Add float property (value type is actually double)</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxFloatProperty(wxT(<span class="stringliteral">"FloatProperty"</span>), wxPG_LABEL, 12345.678) );

        <span class="comment">// Add a bool property</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxBoolProperty(wxT(<span class="stringliteral">"BoolProperty"</span>), wxPG_LABEL, <span class="keyword">false</span>) );

        <span class="comment">// A string property that can be edited in a separate editor dialog.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxLongStringProperty(wxT(<span class="stringliteral">"LongStringProperty"</span>),
                                             wxPG_LABEL,
                                             wxT(<span class="stringliteral">"This is much longer string than the "</span>)
                                             wxT(<span class="stringliteral">"first one. Edit it by clicking the button."</span>)));

        <span class="comment">// String editor with dir selector button.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxDirProperty(wxT(<span class="stringliteral">"DirProperty"</span>), wxPG_LABEL, ::wxGetUserHome()) );

        <span class="comment">// wxArrayStringProperty embeds a wxArrayString.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxArrayStringProperty(wxT(<span class="stringliteral">"Label of ArrayStringProperty"</span>),
                                              wxT(<span class="stringliteral">"NameOfArrayStringProp"</span>)));

        <span class="comment">// A file selector property.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxFileProperty(wxT(<span class="stringliteral">"FileProperty"</span>), wxPG_LABEL, wxEmptyString) );

        <span class="comment">// Extra: set wildcard for file property (format same as in wxFileDialog).</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea135">SetPropertyAttribute</a>( wxT(<span class="stringliteral">"FileProperty"</span>),
                                  wxPG_FILE_WILDCARD,
                                  wxT(<span class="stringliteral">"All files (*.*)|*.*"</span>) );
</div></pre><p>
Operations on properties should be done either via wxPropertyGrid's (or wxPropertyGridManager's) methods, or by acquiring pointer to a property (Append returns a wxPGProperty* or wxPGId, which is typedef for same), and then calling its method. Note however that property's methods generally do not automatically update grid graphics.<p>
Property container functions operating on properties, such as SetPropertyValue or DisableProperty, all accept a special wxPGPropArg, argument which can automatically convert name of a property to a pointer. For instance:<p>
<pre class="fragment"><div>        <span class="comment">// A file selector property.</span>
        wxPGPropety* p = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxFileProperty(wxT(<span class="stringliteral">"FileProperty"</span>), wxPG_LABEL, wxEmptyString) );

        <span class="comment">// Valid: Set wildcard by name</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea135">SetPropertyAttribute</a>( wxT(<span class="stringliteral">"FileProperty"</span>),
                                  wxPG_FILE_WILDCARD,
                                  wxT(<span class="stringliteral">"All files (*.*)|*.*"</span>) );

        <span class="comment">// Also Valid: Set wildcard by ptr</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea135">SetPropertyAttribute</a>( p,
                                  wxPG_FILE_WILDCARD,
                                  wxT(<span class="stringliteral">"All files (*.*)|*.*"</span>) );
</div></pre><p>
Using pointer is faster, since it doesn't require hash map lookup. Anyway, you can allways get property pointer (wxPGProperty*) as Append/Insert return value, or by calling GetPropertyByName.<p>
Below are samples for using some of the more commong operations. See <a class="el" href="classwxPropertyContainerMethods.htm">wxPropertyContainerMethods</a> and <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> class references for complete list.<p>
<pre class="fragment"><div>        <span class="comment">// wxPGId is a short-hand for wxPGProperty*. Let's use it this time.</span>
        <a class="code" href="classwxPGProperty.htm">wxPGId</a> <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea63">GetPropertyByName</a>( wxT(<span class="stringliteral">"MyProperty"</span>) );

        <span class="comment">// There are many overloaded versions of this method, of which each accept</span>
        <span class="comment">// different type of value.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea166">SetPropertyValue</a>( wxT(<span class="stringliteral">"MyProperty"</span>), 200 );

        <span class="comment">// Setting a string works for all properties - conversion is done</span>
        <span class="comment">// automatically.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea166">SetPropertyValue</a>( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"400"</span>) );

        <span class="comment">// Getting property value as wxVariant.</span>
        wxVariant value = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea80">GetPropertyValue</a>( wxT(<span class="stringliteral">"MyProperty"</span>) );

        <span class="comment">// Getting property value as String (again, works for all typs).</span>
        wxString value = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea91">GetPropertyValueAsString</a>( <span class="keywordtype">id</span> );

        <span class="comment">// Getting property value as int. Provokes a run-time error</span>
        <span class="comment">// if used with property which value type is not "long".</span>
        <span class="keywordtype">long</span> value = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea87">GetPropertyValueAsLong</a>( wxT(<span class="stringliteral">"MyProperty"</span>) );

        <span class="comment">// Set new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida185">SetPropertyName</a>( wxT(<span class="stringliteral">"MyProperty"</span>), wxT(<span class="stringliteral">"X"</span>) );

        <span class="comment">// Set new label - we need to use the new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea145">SetPropertyLabel</a>( wxT(<span class="stringliteral">"X"</span>), wxT(<span class="stringliteral">"New Label"</span>) );

        <span class="comment">// Disable the property. It's text will appear greyed.</span>
        <span class="comment">// This is probably the closest you can get if you want</span>
        <span class="comment">// a "read-only" property.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea15">DisableProperty</a>( <span class="keywordtype">id</span> );
</div></pre><h2><a class="anchor" name="categories">
Categories</a></h2>
<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> has a hierarchial property storage and display model, which allows property categories to hold child properties and even other categories. Other than that, from the programmer's point of view, categories can be treated exactly the same as "other" properties. For example, despite its name, GetPropertyByName also returns a category by name, and SetPropertyLabel also sets label of a category. Note however that sometimes the label of a property category may be referred as caption (for example, there is SetCaptionForegroundColour method that sets text colour of a property category's label).<p>
When category is added at the top (i.e. root) level of the hierarchy, it becomes a *current category*. This means that all other (non-category) properties after it are automatically added to it. You may add properties to specific categories by using <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea112">wxPropertyGrid::Insert</a> or wxPropertyGrid::AppendIn.<p>
Category code sample:<p>
<pre class="fragment"><div>        <span class="comment">// One way to add category (similar to how other properties are added)</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategory.htm">wxPropertyCategory</a>(wxT(<span class="stringliteral">"Main"</span>)) );

        <span class="comment">// All these are added to "Main" category</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxStringProperty(wxT(<span class="stringliteral">"Name"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Age"</span>),wxPG_LABEL,25) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Height"</span>),wxPG_LABEL,180) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Weight"</span>)) );

        <span class="comment">// Another one</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategory.htm">wxPropertyCategory</a>(wxT(<span class="stringliteral">"Attrikbutes"</span>)) );

        <span class="comment">// All these are added to "Attributes" category</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Intelligence"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Agility"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Strength"</span>)) );
</div></pre><h2><a class="anchor" name="parentprops">
Parent Properties</a></h2>
If you want to combine number of properties under single parent (just like wxFontProperty combines font attributes), then the easiest way to proceed is to use wxParentProperty.<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>wxParentProperty's value type is string, in which a child property that has children of its own will be embedded in braces ([]).</li><li>Children of wxParentProperty cannot be accessed globally by their name. Instead, use "Parent.Child" format.</li><li>However, events occur for the children, not the parent. In addition to GetPropertyParent, You can use wxPropertyGridEvent::GetMainParent() to find out property's highest wxParentProperty or wxCustomProperty.</li></ul>
</dd></dl>
Sample:<p>
<pre class="fragment"><div>        <a class="code" href="classwxPGProperty.htm">wxPGId</a> pid = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxParentProperty(wxT(<span class="stringliteral">"Car"</span>),wxPG_LABEL) );

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( pid, <span class="keyword">new</span> wxStringProperty(wxT(<span class="stringliteral">"Model"</span>)),
                                                wxPG_LABEL,
                                                wxT(<span class="stringliteral">"Lamborghini Diablo SV"</span>)) );

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( pid, <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Engine Size (cc)"</span>),
                                             wxPG_LABEL,
                                             5707) );

        <a class="code" href="classwxPGProperty.htm">wxPGId</a> speedId = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( pid, <span class="keyword">new</span> wxParentProperty(wxT(<span class="stringliteral">"Speeds"</span>),wxPG_LABEL) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( speedId, <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Max. Speed (mph)"</span>),wxPG_LABEL,300) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( speedId, <span class="keyword">new</span> wxFloatProperty(wxT(<span class="stringliteral">"0-100 mph (sec)"</span>),wxPG_LABEL,3.9) );
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( speedId, <span class="keyword">new</span> wxFloatProperty(wxT(<span class="stringliteral">"1/4 mile (sec)"</span>),wxPG_LABEL,8.6) );

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea2">AppendIn</a>( pid, <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Price ($)"</span>),
                                             wxPG_LABEL,
                                             300000) );

        <span class="comment">// Displayed value of "Car" property is now:</span>
        <span class="comment">// "Lamborghini Diablo SV; [300; 3.9; 8.6]; 300000"</span>
</div></pre><h2><a class="anchor" name="enumandflags">
wxEnumProperty and wxFlagsProperty</a></h2>
wxEnumProperty is used when you want property's (integer or string) value to be selected from a popup list of choices.<p>
Creating wxEnumProperty is more complex than those described earlier. You have to provide list of constant labels, and optionally relevant values (if label indexes are not sufficient).<p>
<dl compact><dt><b>Remarks:</b></dt><dd></dd></dl>
<ul>
<li>Value wxPG_INVALID_VALUE (equals 2147483647 which usually equals INT_MAX) is not allowed as value.</li></ul>
<p>
A very simple example:<p>
<pre class="fragment"><div>        <span class="comment">//</span>
        <span class="comment">// Using wxArrayString</span>
        <span class="comment">//</span>
        wxArrayString arrDiet;
        arr.Add(wxT(<span class="stringliteral">"Herbivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Carnivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Omnivore"</span>));

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                       wxPG_LABEL,
                                       arrDiet) );



        <span class="comment">//</span>
        <span class="comment">// Using wxChar* array</span>
        <span class="comment">//</span>
        <span class="keyword">const</span> wxChar* arrayDiet[] =
        { wxT(<span class="stringliteral">"Herbivore"</span>), wxT(<span class="stringliteral">"Carnivore"</span>), wxT(<span class="stringliteral">"Omnivore"</span>), NULL };

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                       wxPG_LABEL,
                                       arrayDiet) );
</div></pre><p>
Here's extended example using values as well:<p>
<pre class="fragment"><div>        <span class="comment">//</span>
        <span class="comment">// Using wxArrayString and wxArrayInt</span>
        <span class="comment">//</span>
        wxArrayString arrDiet;
        arr.Add(wxT(<span class="stringliteral">"Herbivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Carnivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Omnivore"</span>));

        wxArrayInt arrIds;
        arrIds.Add(40);
        arrIds.Add(45);
        arrIds.Add(50);

        <span class="comment">// Note that the initial value (the last argument) is the actual value,</span>
        <span class="comment">// not index or anything like that. Thus, our value selects "Omnivore".</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                       wxPG_LABEL,
                                       arrDiet,
                                       arrIds,
                                       50));


        <span class="comment">//</span>
        <span class="comment">// Using wxChar* and long arrays</span>
        <span class="comment">//</span>
        <span class="keyword">const</span> wxChar* array_diet[] =
        { wxT(<span class="stringliteral">"Herbivore"</span>), wxT(<span class="stringliteral">"Carnivore"</span>), wxT(<span class="stringliteral">"Omnivore"</span>), NULL };

        <span class="keywordtype">long</span> array_diet_ids[] =
        { 40, 45, 50 };

        <span class="comment">// Value can be set from string as well</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                       wxPG_LABEL,
                                       array_diet,
                                       array_diet_ids);
</div></pre><p>
<a class="el" href="classwxPGChoices.htm">wxPGChoices</a> is a class where wxEnumProperty, and other properties which require label storage, actually stores strings and values. It is used to facilitiate reference counting, and therefore recommended way of adding items when multiple properties share the same set.<p>
You can use it directly as well, filling it and then passing it to the constructor.<p>
<pre class="fragment"><div>        <a class="code" href="classwxPGChoices.htm">wxPGChoices</a> chs;
        chs.<a class="code" href="classwxPGChoices.htm#wxPGChoicesa3">Add</a>(wxT(<span class="stringliteral">"Herbivore"</span>),40);
        chs.<a class="code" href="classwxPGChoices.htm#wxPGChoicesa3">Add</a>(wxT(<span class="stringliteral">"Carnivore"</span>),45);
        chs.<a class="code" href="classwxPGChoices.htm#wxPGChoicesa3">Add</a>(wxT(<span class="stringliteral">"Omnivore"</span>),50);

        <span class="comment">// Note: you can add even whole arrays to wxPGChoices</span>

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                       wxPG_LABEL,
                                       chs) );

        <span class="comment">// Add same choices to another property as well - this is efficient due</span>
        <span class="comment">// to reference counting</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxEnumProperty(wxT(<span class="stringliteral">"Diet 2"</span>),
                                       wxPG_LABEL,
                                       chs) );
</div></pre><p>
If you later need to change choices used by a property, there is function for that as well.<p>
<pre class="fragment"><div>        <span class="comment">//</span>
        <span class="comment">// Example 1: Add one extra item</span>
        <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>&amp; choices = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea67">GetPropertyChoices</a>(wxT(<span class="stringliteral">"Diet"</span>));
        choices.<a class="code" href="classwxPGChoices.htm#wxPGChoicesa3">Add</a>(wxT(<span class="stringliteral">"Custom"</span>),55);

        <span class="comment">//</span>
        <span class="comment">// Example 2: Replace all the choices</span>
        <a class="code" href="classwxPGChoices.htm">wxPGChoices</a> chs;
        chs.<a class="code" href="classwxPGChoices.htm#wxPGChoicesa3">Add</a>(wxT(<span class="stringliteral">"&lt;No valid items yet&gt;"</span>),0);
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea138">SetPropertyChoices</a>(wxT(<span class="stringliteral">"Diet"</span>),chs);
</div></pre><p>
If you want to create your enum properties with simple (label,name,value) constructor, then you need to create a new property class using one of the supplied macro pairs. See <a class="el" href="index.htm#newprops">Creating New Properties</a> for details.<p>
<b>wxEditEnumProperty</b> is works exactly like wxEnumProperty, except is uses non-readonly combobox as default editor, and has string value by default.<p>
wxFlagsProperty is similar:<p>
<pre class="fragment"><div>        <span class="keyword">const</span> wxChar* flags_prop_labels[] = { wxT(<span class="stringliteral">"wxICONIZE"</span>),
            wxT(<span class="stringliteral">"wxCAPTION"</span>), wxT(<span class="stringliteral">"wxMINIMIZE_BOX"</span>), wxT(<span class="stringliteral">"wxMAXIMIZE_BOX"</span>), NULL };

        <span class="comment">// this value array would be optional if values matched string indexes</span>
        <span class="keywordtype">long</span> flags_prop_values[] = { wxICONIZE, wxCAPTION, wxMINIMIZE_BOX,
            wxMAXIMIZE_BOX };

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxFlagsProperty(wxT(<span class="stringliteral">"Window Style"</span>),
                                        wxPG_LABEL,
                                        flags_prop_labels,
                                        flags_prop_values,
                                        wxDEFAULT_FRAME_STYLE) );
</div></pre><p>
wxFlagsProperty can use <a class="el" href="classwxPGChoices.htm">wxPGChoices</a> just the same way as wxEnumProperty (and also custom property classes can be created with similar macro pairs). <b>Note: </b> When changing "choices" (ie. flag labels) of wxFlagsProperty, you will need to use SetPropertyChoices - otherwise they will not get updated properly.<h2><a class="anchor" name="advprops">
Specialized Properties</a></h2>
This section describes the use of less often needed property classes. To use them, you have to include &lt;wx/propgrid/advprops.h&gt;.<p>
<pre class="fragment"><div>    <span class="comment">// Necessary extra header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/advprops.h&gt;</span>

    ...

        <span class="comment">// Date property.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxDateProperty(wxT(<span class="stringliteral">"MyDateProperty"</span>),
                                       wxPG_LABEL,
                                       wxDateTime::Now()) );

        <span class="comment">// Image file property. Wildcard is auto-generated from available</span>
        <span class="comment">// image handlers, so it is not set this time.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxImageFileProperty(wxT(<span class="stringliteral">"Label of ImageFileProperty"</span>),
                                            wxT(<span class="stringliteral">"NameOfImageFileProp"</span>)) );

        <span class="comment">// Font property has sub-properties. Note that we give window's font as</span>
        <span class="comment">// initial value.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),
                                       wxPG_LABEL,
                                       GetFont()) );

        <span class="comment">// Colour property with arbitrary colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxColourProperty(wxT(<span class="stringliteral">"My Colour 1"</span>),
                                         wxPG_LABEL,
                                         wxColour(242,109,0) ) );

        <span class="comment">// System colour property.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxSystemColourProperty(wxT(<span class="stringliteral">"My SysColour 1"</span>),
                                               wxPG_LABEL,
                                               wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)) );

        <span class="comment">// System colour property with custom colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxSystemColourProperty(wxT(<span class="stringliteral">"My SysColour 2"</span>),
                                               wxPG_LABEL,
                                               wxColour(0,200,160) ) );

        <span class="comment">// Cursor property</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxCursorProperty(wxT(<span class="stringliteral">"My Cursor"</span>),
                                         wxPG_LABEL,
                                         wxCURSOR_ARROW));
</div></pre><h2><a class="anchor" name="iterating">
Iterating through a property container</a></h2>
You can use somewhat STL'ish iterator classes to iterate through the grid. Here is a simple example of forward iterating through all individual properties (not categories or sub-propeties that are normally 'transparent' to application code):<p>
<pre class="fragment"><div>        <a class="code" href="classwxPropertyGridIterator.htm">wxPropertyGridIterator</a> it;

        <span class="keywordflow">for</span> ( it = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea48">GetIterator</a>();
              !it.<a class="code" href="classwxPropertyGridIteratorBase.htm#wxPropertyGridIteratorBasea1">AtEnd</a>();
              it++ )
        {
            <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p = *it;
            <span class="comment">// Do something with the property</span>
        }
</div></pre><p>
As expected there is also a const iterator:<p>
<pre class="fragment"><div>        <a class="code" href="classwxPropertyGridConstIterator.htm">wxPropertyGridConstIterator</a> it;

        <span class="keywordflow">for</span> ( it = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea48">GetIterator</a>();
              !it.<a class="code" href="classwxPropertyGridIteratorBase.htm#wxPropertyGridIteratorBasea1">AtEnd</a>();
              it++ )
        {
            <span class="keyword">const</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p = *it;
            <span class="comment">// Do something with the property</span>
        }
</div></pre><p>
You can give some arguments to GetIterator to determine which properties get automatically filtered out. For complete list of options, see <a class="el" href="group__iteratorflags.htm">List of Property Iterator Flags</a>. GetIterator() also accepts other arguments. See <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea48">wxPropertyContainerMethods::GetIterator()</a> for details.<p>
This example reverse-iterates through all visible items:<p>
<pre class="fragment"><div>        <a class="code" href="classwxPropertyGridIterator.htm">wxPropertyGridIterator</a> it;

        <span class="keywordflow">for</span> ( it = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea48">GetIterator</a>(wxPG_ITERATE_VISIBLE, wxBOTTOM);
              !it.<a class="code" href="classwxPropertyGridIteratorBase.htm#wxPropertyGridIteratorBasea1">AtEnd</a>();
              it-- )
        {
            <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p = *it;
            <span class="comment">// Do something with the property</span>
        }
</div></pre><p>
GetIterator() only works with <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> and the individual pages of <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>. In order to iterate through an arbitrary property container, you need to use <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea105">wxPropertyContainerMethods::GetVIterator()</a>. Note however that this virtual iterater is limited to forward iteration.<p>
<pre class="fragment"><div>        <a class="code" href="classwxPGVIterator.htm">wxPGVIterator</a> it;

        <span class="keywordflow">for</span> ( it = manager-&gt;GetVIterator();
              !it.<a class="code" href="classwxPGVIterator.htm#wxPGVIteratora0">AtEnd</a>();
              it.<a class="code" href="classwxPGVIterator.htm#wxPGVIteratora2">Next</a>() )
        {
            <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p = it.<a class="code" href="classwxPGVIterator.htm#wxPGVIteratora1">GetProperty</a>();
            <span class="comment">// Do something with the property</span>
        }
</div></pre><h2><a class="anchor" name="operations">
More About Operating with Properties</a></h2>
Getting value of selected wxSystemColourProperty (which value type is derived from wxObject):<p>
<pre class="fragment"><div>        <a class="code" href="classwxPGProperty.htm">wxPGId</a> <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida119">GetSelection</a>();

        <span class="keywordflow">if</span> ( <span class="keywordtype">id</span> )
        {
            <span class="comment">// Get name of property</span>
            <span class="keyword">const</span> wxString&amp; name = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea75">GetPropertyName</a>( <span class="keywordtype">id</span> );

            <span class="comment">// If type is not correct, GetColour() method will produce run-time error</span>
            <span class="keywordflow">if</span> ( pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea97">GetPropertyValueType</a>() == wxT(<span class="stringliteral">"wxColourPropertyValue"</span>) ) )
            {
                <a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>* pcolval =
                    wxDynamicCast(pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea95">GetPropertyValueAsWxObjectPtr</a>(<span class="keywordtype">id</span>),
                                  <a class="code" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a>);

                <span class="comment">// Report value</span>
                wxString text;
                <span class="keywordflow">if</span> ( pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo1">m_type</a> == wxPG_CUSTOM_COLOUR )
                    text.Printf( wxT(<span class="stringliteral">"It is custom colour: (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Red(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Green(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Blue());
                <span class="keywordflow">else</span>
                    text.Printf( wxT(<span class="stringliteral">"It is wx system colour (number=%i): (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo1">m_type</a>,
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Red(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Green(),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">m_colour</a>.Blue());

                wxMessageBox( text );
            }
        }
</div></pre><h2><a class="anchor" name="populating">
Populating wxPropertyGrid Automatically</a></h2>
<h3><a class="anchor" name="fromvariants">
Populating from List of wxVariants</a></h3>
Example of populating an empty <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> from a values stored in an arbitrary list of wxVariants.<p>
<pre class="fragment"><div>        <span class="comment">// This is a static method that initializes *all* builtin type handlers</span>
        <span class="comment">// available, including those for wxColour and wxFont. Refers to *all*</span>
        <span class="comment">// included properties, so when compiling with static library, this</span>
        <span class="comment">// method may increase the executable size significantly.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagee4">InitAllTypeHandlers</a>();

        <span class="comment">// Get contents of the grid as a wxVariant list</span>
        wxVariant all_values = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea96">GetPropertyValues</a>();

        <span class="comment">// Populate the list with values. If a property with appropriate</span>
        <span class="comment">// name is not found, it is created according to the type of variant.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea168">SetPropertyValues</a>( my_list_variant );

        <span class="comment">// In order to get wxObject ptr from a variant value,</span>
        <span class="comment">// wxGetVariantCast(VARIANT,CLASSNAME) macro has to be called.</span>
        <span class="comment">// Like this:</span>
        wxVariant v_txcol = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea80">GetPropertyValue</a>(wxT(<span class="stringliteral">"Text Colour"</span>));
        <span class="keyword">const</span> wxColour&amp; txcol = wxGetVariantCast(v_txcol,wxColour);
</div></pre><h2><a class="anchor" name="events">
Event Handling</a></h2>
Probably the most important event is the Changed event which occurs when value of any property is changed by the user. Use EVT_PG_CHANGED(id,func) in your event table to use it. For complete list of event types, see <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> class reference.<p>
The custom event class, <a class="el" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>, has methods to directly access the property that triggered the event.<p>
Here's a small sample:<p>
<pre class="fragment"><div>    <span class="comment">// Portion of an imaginary event table</span>
    BEGIN_EVENT_TABLE(MyForm, wxFrame)

        ...

        <span class="comment">// This occurs when a property value changes</span>
        EVT_PG_CHANGED( PGID, MyForm::OnPropertyGridChange )

        ...

    END_EVENT_TABLE()

    <span class="keywordtype">void</span> MyForm::OnPropertyGridChange( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event )
    {
        <a class="code" href="classwxPGProperty.htm">wxPGProperty</a> *property = event.<a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa5">GetProperty</a>();

        <span class="comment">// It may be NULL</span>
        <span class="keywordflow">if</span> ( !property )
            <span class="keywordflow">return</span>;

        <span class="comment">// Get name of changed property</span>
        <span class="keyword">const</span> wxString&amp; name = property-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategorya65">GetName</a>();

        <span class="comment">// Get resulting value</span>
        wxVariant value = property-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategorya74">GetValue</a>();
    }
</div></pre><p>
<dl compact><dt><b>Remarks:</b></dt><dd>On Sub-property Event Handling<ul>
<li>For wxParentProperty and wxCustomProperty, events will occur for sub-property. For those properties that inherit directly from wxPGPropertyWithChildren/wxBaseParentPropertyClass (wxFontProperty, wxFlagsProperty, etc), events occur for the main parent property only (actually, you can adjust this behaviour for wxCustomProperty by adjusting wxPG_CUSTOM_PRIVATE_CHILDREN attribute).</li></ul>
</dd></dl>
<ul>
<li>When wxParentProperty or wxCustomProperty's child gets changed, you can use wxPropertyGridEvent::GetMainParent to obtain its top non-category parent (useful, if you have wxParentProperty as child of another wxParentProperty, for example).</li></ul>
<h3><a class="anchor" name="fromfile">
Loading Population from a Text-based Storage</a></h3>
Class <a class="el" href="classwxPropertyGridPopulator.htm">wxPropertyGridPopulator</a> may be helpful when writing code that loads properties from a text-source. In fact, the supplied xrc handler (samples/xm_propgrid.cpp) uses it. See that code for more info.<h2><a class="anchor" name="cellrender">
Customizing Individual Cell Appearance</a></h2>
You can control text colour, background colour, and attached image of each cell in the property grid. Use <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea137">wxPropertyContainerMethods::SetPropertyCell()</a> or <a class="el" href="classwxPGProperty.htm#wxPropertyCategorya110">wxPGProperty::SetCell()</a> for this purpose.<p>
In addition, it is possible to control these characteristics for <a class="el" href="classwxPGChoices.htm">wxPGChoices</a> list items. See wxPGChoices::Item() and <a class="el" href="classwxPGChoiceEntry.htm">wxPGChoiceEntry</a> class reference for more info.<h2><a class="anchor" name="customizing">
Customizing Properties (without sub-classing)</a></h2>
In this section are presented miscellaneous ways to have custom appearance and behaviour for your properties without all the necessary hassle of sub-classing a property class etc.<h3><a class="anchor" name="customimage">
Setting Value Image</a></h3>
Every property can have a small value image placed in front of the actual value text. Built-in example of this can be seen with wxColourProperty and wxImageFileProperty, but for others it can be set using <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea144">wxPropertyGrid::SetPropertyImage</a> method.<h3><a class="anchor" name="customvalidator">
Setting Validator</a></h3>
You can set wxValidator for a property using <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea149">wxPropertyGrid::SetPropertyValidator</a>.<p>
If you need the validators act just like in wxWidgets (instead of lazily, as is the default behaviour), you must set the extra style wxPG_EX_TRADITIONAL_VALIDATORS.<h3><a class="anchor" name="customeditor">
Setting Property's Editor Control(s)</a></h3>
You can set editor control (or controls, in case of a control and button), of any property using <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea142">wxPropertyGrid::SetPropertyEditor</a>. Editors are passed using wxPG_EDITOR(EditorName) macro, and valid built-in EditorNames are TextCtrl, Choice, ComboBox, CheckBox, TextCtrlAndButton, ChoiceAndButton, SpinCtrl, and DatePickerCtrl. Two last mentioned ones require call to static member function <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagee5">wxPropertyGrid::RegisterAdditionalEditors()</a>.<p>
Following example changes wxColourProperty's editor from default Choice to TextCtrlAndButton. wxColourProperty has its internal event handling set up so that button click events of the button will be used to trigger colour selection dialog.<p>
<pre class="fragment"><div>        <a class="code" href="classwxPGProperty.htm">wxPGId</a> colProp = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>(wxColourProperty(wxT(<span class="stringliteral">"Text Colour"</span>)));

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea142">SetPropertyEditor</a>(colProp,wxPG_EDITOR(TextCtrlAndButton));
</div></pre><p>
Naturally, creating and setting custom editor classes is a possibility as well. For more information, see <a class="el" href="classwxPGEditor.htm">wxPGEditor</a> class reference.<h3><a class="anchor" name="editorattrs">
Property Attributes Recognized by Editors</a></h3>
<b>SpinCtrl</b> editor can make use of property's "Min" and "Max" attributes.<h3><a class="anchor" name="multiplebuttons">
Adding Multiple Buttons Next to an Editor</a></h3>
See <a class="el" href="classwxPGMultiButton.htm">wxPGMultiButton</a> class reference.<h3><a class="anchor" name="customeventhandling">
Handling Events Passed from Properties</a></h3>
<b>wxEVT_COMMAND_BUTTON_CLICKED </b>(corresponds to event table macro EVT_BUTTON): Occurs when editor button click is not handled by the property itself (as is the case, for example, if you set property's editor to TextCtrlAndButton from the original TextCtrl).<h3><a class="anchor" name="attributes">
Property Attributes</a></h3>
Miscellaneous values, often specific to a property type, can be set using <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea135">wxPropertyGrid::SetPropertyAttribute</a> and <a class="el" href="classwxPropertyGrid.htm#wxPropertyGrida171">wxPropertyGrid::SetPropertyAttributeAll</a> methods.<p>
Attribute names are strings and values wxVariant. Arbitrary names are allowed inorder to store user values. Constant equivalents of some string names are specified (for 1.2.x compatibility, at the least) for the names of built-in property attributes. For complete list, see <a class="el" href="group__attrids.htm">Property Attributes</a>.<h3><a class="anchor" name="boolcheckbox">
Setting wxBoolProperties to Use Check Box</a></h3>
To have all wxBoolProperties to use CheckBox editor instead of Choice, use following (call after bool properties have been added):<p>
<pre class="fragment"><div>        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida171">SetPropertyAttributeAll</a>(wxPG_BOOL_USE_CHECKBOX,(<span class="keywordtype">long</span>)1);
</div></pre><h2><a class="anchor" name="custprop">
wxCustomProperty</a></h2>
wxCustomProperty allows extra customizing.<p>
<ul>
<li>May have children.</li></ul>
<p>
For more info on attributes, see <a class="el" href="group__attrids.htm">wxPropertyGrid Property Attribute Identifiers</a>. In sample application, there is a CustomProperty property that has children that can be used to modify the property itself.<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Children of wxParentProperty cannot be accessed globally by their name. Instead, use "Parent.Child" format.</li><li>However, events occur for the children, not the parent. In addition to GetPropertyParent, You can use wxPropertyGridEvent::GetMainParent() to find out property's highest wxParentProperty or wxCustomProperty.</li></ul>
</dd></dl>
<b>Limitations:</b><ul>
<li>Currently wxCustomProperty is limited to wxString value type.</li><li>As in wxParentProperty: names of child properties are not visible globally. You need to use "Parent.SubProperty" name format to access them.</li></ul>
<h2><a class="anchor" name="usage2">
Using wxPropertyGridManager</a></h2>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> is an efficient multi-page version of <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>, which can optionally have toolbar for mode and page selection, and a help text box.<p>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> inherits from <a class="el" href="classwxPropertyContainerMethods.htm">wxPropertyContainerMethods</a>, and as such it has most property manipulation functions. However, only some of them affect properties on all pages (eg. GetPropertyByName() and ExpandAll()), while some (eg. Append()) only apply to the currently selected page.<p>
To operate explicitly on properties on specific page, use <a class="el" href="classwxPropertyGridManager.htm#wxPropertyGridManagera42">wxPropertyGridManager::GetPage()</a> to obtain pointer to page's <a class="el" href="classwxPropertyGridPage.htm">wxPropertyGridPage</a> object.<p>
Visual methods, such as SetCellBackgroundColour and GetNextVisible are only available in <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>. Use <a class="el" href="classwxPropertyGridManager.htm#wxPropertyGridManagera34">wxPropertyGridManager::GetGrid()</a> to obtain pointer to it.<p>
Iteration methods will not work in <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>. Instead, you must acquire the internal grid (GetGrid()) or <a class="el" href="classwxPropertyGridPage.htm">wxPropertyGridPage</a> object (GetPage()).<p>
<a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> constructor has exact same format as <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> constructor, and basicly accepts same extra window style flags (albeit also has some extra ones).<p>
Here's some example code for creating and populating a <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>:<p>
<pre class="fragment"><div>        <a class="code" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>* pgMan = <span class="keyword">new</span> <a class="code" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>(<span class="keyword">this</span>, PGID,
            wxDefaultPosition, wxDefaultSize,
            <span class="comment">// These and other similar styles are automatically</span>
            <span class="comment">// passed to the embedded wxPropertyGrid.</span>
            wxPG_BOLD_MODIFIED|wxPG_SPLITTER_AUTO_CENTER|
            <span class="comment">// Include toolbar.</span>
            wxPG_TOOLBAR |
            <span class="comment">// Include description box.</span>
            wxPG_DESCRIPTION |
            <span class="comment">// Include compactor.</span>
            wxPG_COMPACTOR |
            <span class="comment">// Plus defaults.</span>
            wxPGMAN_DEFAULT_STYLE
           );

        <a class="code" href="classwxPropertyGridPage.htm">wxPropertyGridPage</a>* page;

        <span class="comment">// Adding a page sets target page to the one added, so</span>
        <span class="comment">// we don't have to call SetTargetPage if we are filling</span>
        <span class="comment">// it right after adding.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">AddPage</a>(wxT(<span class="stringliteral">"First Page"</span>));
        page = pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera39">GetLastPage</a>();

        page-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategory.htm">wxPropertyCategory</a>(wxT(<span class="stringliteral">"Category A1"</span>)) );

        page-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxIntProperty(wxT(<span class="stringliteral">"Number"</span>),wxPG_LABEL,1) );

        page-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxColourProperty(wxT(<span class="stringliteral">"Colour"</span>),wxPG_LABEL,*wxWHITE) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">AddPage</a>(wxT(<span class="stringliteral">"Second Page"</span>));
        page = pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera39">GetLastPage</a>();

        page-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( wxT(<span class="stringliteral">"Text"</span>),wxPG_LABEL,wxT(<span class="stringliteral">"(no text)"</span>) );

        page-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),wxPG_LABEL) );
</div></pre><h3><a class="anchor" name="propgridpage">
wxPropertyGridPage</a></h3>
<a class="el" href="classwxPropertyGridPage.htm">wxPropertyGridPage</a> is holder of properties for one page in manager. It is derived from wxEvtHandler, so you can subclass it to process page-specific property grid events. Hand over your page instance in <a class="el" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">wxPropertyGridManager::AddPage</a>.<p>
Please note that the <a class="el" href="classwxPropertyGridPage.htm">wxPropertyGridPage</a> itself only sports subset of <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> API (but unlike manager, this include item iteration). Naturally it inherits from wxPropertyGridMethods and <a class="el" href="classwxPropertyGridState.htm">wxPropertyGridState</a>.<h2><a class="anchor" name="subclassing">
Subclassing wxPropertyGrid and wxPropertyGridManager</a></h2>
Few things to note:<p>
<ul>
<li>Only a small percentage of member functions are virtual. If you need more, just let me know.</li></ul>
<p>
<ul>
<li>Data manipulation is done in <a class="el" href="classwxPropertyGridState.htm">wxPropertyGridState</a> class. So, instead of overriding <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea112">wxPropertyGrid::Insert</a>, you'll probably want to override <a class="el" href="classwxPropertyGridState.htm#wxPropertyGridStatea12">wxPropertyGridState::DoInsert</a>.</li></ul>
<p>
<ul>
<li>Override <a class="el" href="classwxPropertyGrid.htm#wxPropertyGridb0">wxPropertyGrid::CreateState</a> to instantiate your derivate <a class="el" href="classwxPropertyGridState.htm">wxPropertyGridState</a>. For <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a>, you'll need to subclass <a class="el" href="classwxPropertyGridPage.htm">wxPropertyGridPage</a> instead (since it is derived from <a class="el" href="classwxPropertyGridState.htm">wxPropertyGridState</a>), and hand over instances in <a class="el" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">wxPropertyGridManager::AddPage</a> calls.</li></ul>
<p>
<ul>
<li>You can use a derivate <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> with manager by overriding <a class="el" href="classwxPropertyGridManager.htm#wxPropertyGridManagerb0">wxPropertyGridManager::CreatePropertyGrid</a> member function.</li></ul>
<h2><a class="anchor" name="misc">
Miscellaneous Topics</a></h2>
<h3><a class="anchor" name="namescope">
Property Name Scope</a></h3>
<ul>
<li>All properties which parent is category or root have their names globally accessible.</li></ul>
<p>
<ul>
<li>Sub-properties (i.e. private child properties which have parent that is not category or root or non-aggregate property) can not be accessed globally by their name. Instead, use "&lt;property&gt;.&lt;subproperty&gt;".</li></ul>
<h3><a class="anchor" name="boolproperty">
wxBoolProperty</a></h3>
There are few points about wxBoolProperty that require futher discussion:<ul>
<li>wxBoolProperty can be shown as either normal combobox or as a checkbox. Property attribute wxPG_BOOL_USE_CHECKBOX is used to change this. For example, if you have a wxFlagsProperty, you can set its all items to use check box using the following: <pre class="fragment"><div>            pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea135">SetPropertyAttribute</a>(wxT(<span class="stringliteral">"MyFlagsProperty"</span>),wxPG_BOOL_USE_CHECKBOX,(<span class="keywordtype">long</span>)1,wxPG_RECURSE);
</div></pre></li></ul>
<p>
<ul>
<li>Default item names for wxBoolProperty are [wxT("False"),wxT("True")]. This can be changed using wxPropertyGrid::SetBoolChoices(trueChoice,falseChoice).</li></ul>
<h3><a class="anchor" name="textctrlupdates">
Updates from wxTextCtrl Based Editor</a></h3>
Changes from wxTextCtrl based property editors are committed (ie. wxEVT_PG_CHANGED is sent etc.) *only* when (1) user presser enter, (2) user moves to edit another property, or (3) when focus or mouse leaves the grid.<p>
Because of this, you may find it useful, in some apps, to monitor wxEVT_COMMAND_TEXT_UPDATED (EVT_TEXT macro) for non-committed changes in editor. However, the current problem is that pressing Esc in editor cancels any changes made, thus possibly rendering your knowledge of changed state incomplete. There is no current, perfect solution for this problem.<h3><a class="anchor" name="splittercentering">
Centering the Splitter</a></h3>
If you need to center the splitter, but only once when the program starts, then do <b>not</b> use the wxPG_SPLITTER_AUTO_CENTER window style, but the <a class="el" href="classwxPropertyGrid.htm#wxPropertyGrida5">wxPropertyGrid::CenterSplitter()</a> method. <b>However, be sure to call it after the sizer setup and SetSize calls!</b> (ie. usually at the end of the frame/dialog constructor)<h3><a class="anchor" name="compilerdefines">
Supported Preprocessor Defines</a></h3>
Here is list of supported preprocessor defines (other than those that relate with wxWidgets core library):<p>
<b>wxPG_INCLUDE_MANAGER:</b> Defines as 0 to exclude <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> from compilation.<p>
<b>wxPG_INCLUDE_ADVPROPS:</b> Defines as 0 to exclude properties and editors defined in <a class="el" href="advprops_8h.htm">advprops.h</a> and advprops.cpp.<p>
<b>wxPG_USE_WXMODULE:</b> Define as 0 to not use wxModule to manage global variables. This may be needed in cases where <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is linked as a plugin DLL, or when <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is linked statically in a DLL.<p>
<b>WXMAKINGLIB_PROPGRID:</b> Define if you are linking <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> statically but wxWidgets itself is DLL.<p>
<b>WXMAKINGDLL_PROPGRID:</b> Define when building <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> as a DLL. This should be automatically defined correctly by the Bakefile-generated makefiles.<p>
<b>wxPG_USE_STL:</b> Define as 1 to let <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> use STL classes in API as much as possible. Default value equals wxUSE_STL.<p>
<b>wxPG_COMPATIBILITY_1_2_0:</b> Define as 1 to make <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> more compatible with the old 1.2.x releases.<p>
<b>wxPG_COMPATIBILITY_1_0_0:</b> Define to make <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> more compatible with the old 1.0.x releases.<h2><a class="anchor" name="proplist">
Property Class Descriptions</a></h2>
Here are descriptions of built-in properties, with attributes (see <a class="el" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea135">wxPropertyGrid::SetPropertyAttribute</a>) that apply to them. Note that not all attributes are necessarily here. For complete list, see <a class="el" href="group__attrids.htm">Property Attributes</a>.<h3><a class="anchor" name="wxPropertyCategory">
wxPropertyCategory</a></h3>
Not an actual property per se, but a header for a group of properties.<h3><a class="anchor" name="wxParentProperty">
wxParentProperty</a></h3>
Pseudo-property that can have sub-properties inserted under itself. Has textctrl editor that allows editing values of all sub-properties in a one string. In essence, it is a category that has look and feel of a property, and which children can be edited via the textctrl.<h3><a class="anchor" name="wxStringProperty">
wxStringProperty</a></h3>
<b>Inheritable Class:</b> wxStringProperty<p>
Simple string property. wxPG_STRING_PASSWORD attribute may be used to echo value as asterisks and use wxTE_PASSWORD for wxTextCtrl.<h3><a class="anchor" name="wxIntProperty">
wxIntProperty</a></h3>
Like wxStringProperty, but converts text to a signed long integer. wxIntProperty seemlessly supports 64-bit integers (ie. wxLongLong).<h3><a class="anchor" name="wxUIntProperty">
wxUIntProperty</a></h3>
Like wxIntProperty, but displays value as unsigned int. To set the prefix used globally, manipulate wxPG_UINT_PREFIX string attribute. To set the globally used base, manipulate wxPG_UINT_BASE int attribute. Regardless of current prefix, understands (hex) values starting with both "0x" and "$". wxUIntProperty seemlessly supports 64-bit unsigned integers (ie. wxULongLong).<h3><a class="anchor" name="wxFloatProperty">
wxFloatProperty</a></h3>
Like wxStringProperty, but converts text to a double-precision floating point. Default float-to-text precision is 6 decimals, but this can be changed by modifying wxPG_FLOAT_PRECISION attribute.<h3><a class="anchor" name="wxBoolProperty">
wxBoolProperty</a></h3>
Represents a boolean value. wxChoice is used as editor control, by the default. wxPG_BOOL_USE_CHECKBOX attribute can be set to 1 inorder to use check box instead.<h3><a class="anchor" name="wxLongStringProperty">
wxLongStringProperty</a></h3>
Like wxStringProperty, but has a button that triggers a small text editor dialog.<h3><a class="anchor" name="wxDirProperty">
wxDirProperty</a></h3>
Like wxLongStringProperty, but the button triggers dir selector instead.<h3><a class="anchor" name="wxFileProperty">
wxFileProperty</a></h3>
Like wxLongStringProperty, but the button triggers file selector instead. Default wildcard is "All files..." but this can be changed by setting wxPG_FILE_WILDCARD attribute (see wxFileDialog for format details). Attribute wxPG_FILE_SHOW_FULL_PATH can be set to 0 inorder to show only the filename, not the entire path.<h3><a class="anchor" name="wxEnumProperty">
wxEnumProperty</a></h3>
Represents a single selection from a list of choices - custom combobox control is used to edit the value.<h3><a class="anchor" name="wxFlagsProperty">
wxFlagsProperty</a></h3>
Represents a bit set that fits in a long integer. wxBoolProperty sub-properties are created for editing individual bits. Textctrl is created to manually edit the flags as a text; a continous sequence of spaces, commas and semicolons is considered as a flag id separator. <b>Note: </b> When changing "choices" (ie. flag labels) of wxFlagsProperty, you will need to use SetPropertyChoices - otherwise they will not get updated properly.<h3><a class="anchor" name="wxArrayStringProperty">
wxArrayStringProperty</a></h3>
Allows editing of a list of strings in wxTextCtrl and in a separate dialog.<h3><a class="anchor" name="wxDateProperty">
wxDateProperty</a></h3>
wxDateTime property. Default editor is DatePickerCtrl, altough TextCtrl should work as well. wxPG_DATE_FORMAT attribute can be used to change string wxDateTime::Format uses (altough default is recommended as it is locale-dependant), and wxPG_DATE_PICKER_STYLE allows changing window style given to DatePickerCtrl (default is wxDP_DEFAULT|wxDP_SHOWCENTURY).<h3><a class="anchor" name="wxEditEnumProperty">
wxEditEnumProperty</a></h3>
Represents a string that can be freely edited or selected from list of choices - custom combobox control is used to edit the value.<h3><a class="anchor" name="wxMultiChoiceProperty">
wxMultiChoiceProperty</a></h3>
Allows editing a multiple selection from a list of strings. This is property is pretty much built around concept of wxMultiChoiceDialog.<h3><a class="anchor" name="wxImageFileProperty">
wxImageFileProperty</a></h3>
Like wxFileProperty, but has thumbnail of the image in front of the filename and autogenerates wildcard from available image handlers.<h3><a class="anchor" name="wxColourProperty">
wxColourProperty</a></h3>
<b>Useful alternate editor:</b> Choice.<p>
Represents wxColour. wxButton is used to trigger a colour picker dialog.<h3><a class="anchor" name="wxFontProperty">
wxFontProperty</a></h3>
Represents wxFont. Various sub-properties are used to edit individual subvalues.<h3><a class="anchor" name="wxSystemColourProperty">
wxSystemColourProperty</a></h3>
Represents wxColour and a system colour index. wxChoice is used to edit the value. Drop-down list has color images.<h3><a class="anchor" name="wxCursorProperty">
wxCursorProperty</a></h3>
Represents a wxCursor. wxChoice is used to edit the value. Drop-down list has cursor images under some (wxMSW) platforms.<h3><a class="anchor" name="wxCustomProperty">
wxCustomProperty</a></h3>
A customizable property class with string data type. Value image, Editor class, and children can be modified.<h3><a class="anchor" name="Additional">
Sample Properties</a></h3>
Sample application has following additional examples of custom properties:<ul>
<li>wxFontDataProperty ( edits wxFontData )</li><li>wxPointProperty ( edits wxPoint )</li><li>wxSizeProperty ( edits wxSize )</li><li>wxAdvImageFileProperty ( like wxImageFileProperty, but also has a drop-down for recent image selection)</li><li>wxDirsProperty ( edits a wxArrayString consisting of directory strings)</li><li>wxArrayDoubleProperty ( edits wxArrayDouble )</li></ul>
<h2><a class="anchor" name="userhelp">
Using wxPropertyGrid control</a></h2>
This is a short summary of how a <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> is used (not how it is programmed), or, rather, how it <b>should</b> behave in practice.<p>
<ul>
<li>Basic mouse usage is as follows:<br>
<ul>
<li>Clicking property label selects it.</li><li>Clicking property value selects it and focuses to editor control.</li><li>Clicking category label selects the category.</li><li>Double-clicking category label selects the category and expands/collapses it.</li><li>Double-clicking labels of a property with children expands/collapses it.</li></ul>
</li></ul>
<p>
<ul>
<li>Keyboard usage is as follows:<br>
<ul>
<li>alt + down (or right) - displays editor dialog (if any) for a property. Note that this shortcut can be changed using <a class="el" href="classwxPropertyGrid.htm#wxPropertyGrida156">wxPropertyGrid::SetButtonShortcut</a>.<br>
 Only when editor control is not focused:<br>
</li><li>cursor up - moves to previous visible property<br>
</li><li>cursor down - moves to next visible property<br>
</li><li>cursor left - if collapsible, collapses, otherwise moves to previous property<br>
</li><li>cursor right - if expandable, expands, otherwise moves to next property<br>
</li><li>tab (if enabled) - focuses keyboard to the editor control of selected property<br>
 Only when editor control is focused:<br>
</li><li>return/enter - confirms changes made to a wxTextCtrl based editor<br>
</li><li>tab - moves to next visible property (or, if in last one, moves out of grid)<br>
</li><li>shift-tab - moves to previous visible property (or, if in first one, moves out of grid)<br>
</li><li>escape - unfocuses from editor control and cancels any changes made (latter for wxTextCtrl based editor only)<br>
</li></ul>
</li></ul>
<p>
<ul>
<li>In long strings tabs are represented by "\t" and line break by "\n".</li></ul>
<h2><a class="anchor" name="notes">
Design Notes</a></h2>
<ul>
<li>Currently <a class="el" href="classwxPropertyGridManager.htm">wxPropertyGridManager</a> uses "easy" way to relay events from embedded <a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a>. That is, the exact same id is used for both.</li></ul>
<p>
<ul>
<li>If wxPG_DOUBLE_BUFFER is 1 (default for MSW, GTK and MAC), wxPropertyGrid::DoDrawItems composes the image on a wxMemoryDC. This effectively eliminates flicker caused by drawing itself (property editor controls are another matter).</li></ul>
<p>
<ul>
<li>Under wxMSW, flicker freedom when creating native editor controls is achieved by using following undocumented scheme: <pre class="fragment"><div>        wxControl* ctrl = <span class="keyword">new</span> wxControl();
<span class="preprocessor">      #ifdef __WXMSW__</span>
<span class="preprocessor"></span>        ctrl-&gt;Hide();
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>        ctrl-&gt;Create(parent,<span class="keywordtype">id</span>,...);

        ...further initialize, move, resize, etc...

      #ifdef __WXMSW__
        ctrl-&gt;Show();
<span class="preprocessor">      #endif</span>
</div></pre></li></ul>
<h2><a class="anchor" name="crossplatform">
Crossplatform Notes (not necessarily wxPropertyGrid specific)</a></h2>
<ul>
<li>GTK1: When showing a dialog you may encounter invisible font! Solution: Set parent's font using SetOwnFont instead of SetFont.</li></ul>
<p>
<ul>
<li>GTK: Your own control can overdraw wxGTK wxWindow border!</li></ul>
<p>
<ul>
<li>wxWindow::SetSizeHints may be necessary to shrink controls below certain treshold, but only on some platforms. For example wxMSW might allow any shrinking without SetSizeHints call where wxGTK might not.</li></ul>
<p>
<ul>
<li>GTK Choice (atleast, maybe other controls as well) likes its items set in constructor. Appending them seems to be slower (Freeze+Thaw won't help). Even using Append that gets wxArrayString argument may not be good, since it may just append every string one at a time.</li></ul>
<h2><a class="anchor" name="newprops">
Creating New Properties</a></h2>
Easiest solution for creating an arbitrary property is to subclass an existing, property class that most resembles the intended end result. You may need to include header file wx/propgrid/propdev.h.<p>
For instance:<p>
<pre class="fragment"><div><span class="preprocessor">    #include &lt;wx/propgrid/propdev.h&gt;</span>

    <span class="comment">// wxLongStringProperty has wxString as value type and TextCtrlAndButton as editor.</span>
    <span class="keyword">class </span>MyStringProperty : <span class="keyword">public</span> wxLongStringProperty
    {
        DECLARE_DYNAMIC_CLASS(MyStringProperty)
    <span class="keyword">public</span>:

        <span class="comment">// Normal property constructor.</span>
        MyStringProperty(<span class="keyword">const</span> wxString&amp; name,
                         <span class="keyword">const</span> wxString&amp; label = wxPG_LABEL,
                         <span class="keyword">const</span> wxString&amp; value = wxEmptyString)
            : wxLongStringProperty(name,label,value)
        {
        }

        <span class="comment">// Do something special when button is clicked.</span>
        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnButtonClick(wxPropertyGrid* propGrid,
                                   wxWindow* primaryCtrl)
        {
            <span class="comment">// Update value in case last minute changes were made.</span>
            PrepareValueForDialogEditing(propGrid);

            <span class="comment">// TODO: Create dialog (m_value has current string, if needed)</span>

            <span class="keywordtype">int</span> res = dlg.ShowModal();
            <span class="keywordflow">if</span> ( res == wxID_OK &amp;&amp; dlg.IsModified() )
            {
                DoSetValue(dlg.GetString());
                UpdateControl(primaryCtrl);
                <span class="keywordflow">return</span> <span class="keyword">true</span>;
            }

            <span class="keywordflow">return</span> <span class="keyword">false</span>;
        }

    <span class="keyword">protected</span>:
    };

    IMPLEMENT_DYNAMIC_CLASS(MyStringProperty, wxLongStringProperty)
</div></pre><p>
You can then create a property instance, for instance:<p>
<pre class="fragment"><div>        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> MyStringProperty(name,label,value) );
</div></pre><p>
If you want to change editor used, use code like below (continues our sample above).<p>
Note that built-in editors include: TextCtrl, Choice, ComboBox, TextCtrlAndButton, ChoiceAndButton, CheckBox, SpinCtrl, and DatePickerCtrl.<p>
<pre class="fragment"><div>        <span class="comment">// In class body:</span>
        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classwxPGEditor.htm">wxPGEditor</a>* DoGetEditorClass()<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="keywordflow">return</span> wxPG_EDITOR(TextCtrl);
        }
</div></pre><p>
You can change the 'value type' of a property by simply assigning different type of variant with SetValue. <b>It is mandatory to implement wxVariantData class for all data types used as property values.</b> Also, it is further recommended to derive your class from <a class="el" href="classwxPGVariantData.htm">wxPGVariantData</a> (see class documentation for more info).<p>
<dl compact><dt><b>Remarks:</b></dt><dd><ul>
<li>For practical examples of arbitrary properties, please take a look at the sample properties in samples/sampleprops.cpp.</li><li>Read <a class="el" href="classwxPGProperty.htm">wxPGProperty</a> and <a class="el" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a> class documentation to find out what each virtual member function should do.</li><li>Documentation below may be helpful (altough you'd probably do better by looking at the sample properties first).</li></ul>
</dd></dl>
<h3><a class="anchor" name="methoda">
Macro Pairs</a></h3>
These are quick methods for creating customized properties.<h4><a class="anchor" name="custstringprop">
String Property with Button</a></h4>
This custom property will be exactly the same as wxLongStringProperty, except that you can specify a custom code to handle what happens when the button is pressed.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_STRING_PROPERTY(PROPNAME)
</div></pre><p>
In source: <pre class="fragment"><div>        <span class="comment">// FLAGS can be wxPG_NO_ESCAPE if escape sequences shall not be expanded.</span>
        WX_PG_IMPLEMENT_STRING_PROPERTY(PROPNAME, FLAGS)

        <span class="keywordtype">bool</span> PROPNAME::OnButtonClick( wxPropertyGrid* propgrid, wxString&amp; value )
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show dialog, read initial string from value. If changed,</span>
            <span class="comment">//   store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</div></pre><p>
FLAGS is either wxPG_NO_ESCAPE (newlines and tabs are not translated to and from escape sequences) or wxPG_ESCAPE (newlines and tabs are transformed into C-string escapes).<p>
There is also WX_PG_IMPLEMENT_STRING_PROPERTY_WITH_VALIDATOR variant which also allows setting up a validator for the property. Like this:<p>
<pre class="fragment"><div>        WX_PG_IMPLEMENT_STRING_PROPERTY_WITH_VALIDATOR(PROPNAME, FLAGS)

        <span class="keywordtype">bool</span> PROPNAME::OnButtonClick( wxPropertyGrid* propgrid, wxString&amp; value )
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show dialog, read initial string from value. If changed,</span>
            <span class="comment">//   store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }

        wxValidator* PROPNAME::DoGetValidator()<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="comment">//</span>
            <span class="comment">// TODO: Return pointer to a new wxValidator instance. In most situations,</span>
            <span class="comment">//   code like this should work well:</span>
            <span class="comment">//</span>
            <span class="comment">//    WX_PG_DOGETVALIDATOR_ENTRY()</span>
            <span class="comment">//</span>
            <span class="comment">//    wxMyValidator* validator = new wxMyValidator(...);</span>
            <span class="comment">//</span>
            <span class="comment">//    ... prepare validator...</span>
            <span class="comment">//</span>
            <span class="comment">//    WX_PG_DOGETVALIDATOR_EXIT(validator)</span>
            <span class="comment">//</span>
            <span class="comment">//  Macros are used to maintain only one actual validator instance</span>
            <span class="comment">//  (ie. on a second call, function exits within the first macro).</span>
            <span class="comment">//</span>
            <span class="comment">//  For real examples, search props.cpp for ::DoGetValidator, it should</span>
            <span class="comment">//  have several.</span>
            <span class="comment">//</span>
        }
</div></pre><h4><a class="anchor" name="custflagsprop">
Custom Flags Property</a></h4>
Flags property with custom default value and built-in labels/values.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(PROPNAME)
</div></pre><p>
In source: <pre class="fragment"><div>        <span class="comment">// LABELS are VALUES are as in the arguments to wxFlagsProperty</span>
        <span class="comment">// constructor. DEFVAL is the new default value (normally it is 0).</span>
        WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY(PROPNAME,LABELS,VALUES,DEFAULT_FLAGS)
</div></pre><p>
The new property class will have simple (label,name,value) constructor.<h4><a class="anchor" name="custenumprop">
Custom EnumProperty</a></h4>
Exactly the same as custom FlagsProperty. Simply replace FLAGS with ENUM in macro names to create wxEnumProperty based class instead.<h4><a class="anchor" name="custarraystringprop">
Custom ArrayString property</a></h4>
This type of custom property allows selecting different string delimiter (default is '"' on both sides of the string - as in C code), and allows adding custom button into the editor dialog.<p>
In header: <pre class="fragment"><div>        WX_PG_DECLARE_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty)
</div></pre><p>
In source:<p>
<pre class="fragment"><div>        <span class="comment">// second argument = string delimiter. '"' for C string style (default),</span>
        <span class="comment">//    and anything else for str1&lt;delimiter&gt; str2&lt;delimiter&gt; str3 style</span>
        <span class="comment">//    (so for example, using ';' would result to str1; str2; str3).</span>
        <span class="comment">// third argument = const wxChar* text for the custom button. If NULL</span>
        <span class="comment">//    then no button is added.</span>
        WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty,<span class="charliteral">','</span>,wxT(<span class="stringliteral">"Browse"</span>))

        <span class="keywordtype">bool</span> wxMyArrayStringProperty::OnCustomStringEdit(wxWindow* parent,
                                                         wxString&amp; value)
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show custom editor dialog, read initial string from value.</span>
            <span class="comment">//   If changed, store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</div></pre><h4><a class="anchor" name="custcolprop">
Custom ColourProperty</a></h4>
wxColourProperty/wxSystemColourProperty that can have custom list of colours in dropdown.<p>
Use version that doesn't have _USES_WXCOLOUR in macro names to have <a class="el" href="classwxColourPropertyValue.htm">wxColourPropertyValue</a> as value type instead of plain wxColour (in this case values array might also make sense).<p>
In header: <pre class="fragment"><div><span class="preprocessor">        #include &lt;wx/propgrid/advprops.h&gt;</span>
        WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty)
</div></pre><p>
In source:<p>
<pre class="fragment"><div>        <span class="comment">// Colour labels. Last (before NULL, if any) must be Custom.</span>
        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* mycolprop_labels[] = {
            wxT(<span class="stringliteral">"Black"</span>),
            wxT(<span class="stringliteral">"Blue"</span>),
            wxT(<span class="stringliteral">"Brown"</span>),
            wxT(<span class="stringliteral">"Custom"</span>),
            (<span class="keyword">const</span> wxChar*) NULL
        };

        <span class="comment">// Relevant colour values as unsigned longs.</span>
        <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> mycolprop_colours[] = {
            <a class="code" href="group__miscellaneous.htm#ga8">wxPG_COLOUR</a>(0,0,0),
            <a class="code" href="group__miscellaneous.htm#ga8">wxPG_COLOUR</a>(0,0,255),
            <a class="code" href="group__miscellaneous.htm#ga8">wxPG_COLOUR</a>(166,124,81),
            <a class="code" href="group__miscellaneous.htm#ga8">wxPG_COLOUR</a>(0,0,0)
        };

        <span class="comment">// Implement property class. Third argument is optional values array,</span>
        <span class="comment">// but in this example we are only interested in creating a shortcut</span>
        <span class="comment">// for user to access the colour values.</span>
        WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty,
                                                             mycolprop_labels,
                                                             (<span class="keywordtype">long</span>*)NULL,
                                                             mycolprop_colours)
</div></pre><h2><a class="anchor" name="neweditors">
Creating Custom Property Editor</a></h2>
<ul>
<li>See the sources of built-in editors in contrib/src/propgrid/propgrid.cpp (search for wxPGTextCtrlEditor).</li></ul>
<p>
<ul>
<li>For additional information, see <a class="el" href="classwxPGEditor.htm">wxPGEditor</a> class reference</li></ul>
<h3><a class="anchor" name="wxpythoneditors">
In wxPython</a></h3>
<ul>
<li>See README-propgrid-wxPython.txt </li></ul>
<hr size="1"><address style="align: right;"><small>Generated on Thu Oct 11 17:25:26 2007 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
