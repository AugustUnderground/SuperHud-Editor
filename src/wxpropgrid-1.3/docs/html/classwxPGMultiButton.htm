<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: wxPGMultiButton class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex">  <form class="search" action="search.php" method="get">
<a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="classes.htm">Alphabetical&nbsp;List</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a>  | <span class="search"><u>S</u>earch&nbsp;for&nbsp;<input class="search" type="text" name="query" value="" size="20" accesskey="s"/></span></form></div>
<h1>wxPGMultiButton Class Reference</h1>This class can be used to have multiple buttons in a property editor. You will need to create a new property editor class, override CreateControls, and have it return wxPGMultiButton instance in wxPGWindowList::SetSecondary(). For instance, here we add three buttons to a textctrl editor:.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;editors.h&gt;</code>
<p>
<a href="classwxPGMultiButton-members.htm">List of all members.</a><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="wxPGMultiButtona0" doxytag="wxPGMultiButton::Add" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>Add</b> (const wxString &amp;label, int id=-2)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="wxPGMultiButtona1" doxytag="wxPGMultiButton::FinalizePosition" ></a>
void&nbsp;</td><td class="memItemRight" valign=bottom><b>FinalizePosition</b> (const wxPoint &amp;pos)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="wxPGMultiButtona2" doxytag="wxPGMultiButton::GetButton" ></a>
const wxWindow *&nbsp;</td><td class="memItemRight" valign=bottom><b>GetButton</b> (unsigned int i) const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="wxPGMultiButtona3" doxytag="wxPGMultiButton::GetButton" ></a>
wxWindow *&nbsp;</td><td class="memItemRight" valign=bottom><b>GetButton</b> (unsigned int i)</td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="classwxPGMultiButton.htm#wxPGMultiButtona4">GetButtonId</a> (unsigned int i) const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="wxPGMultiButtona5" doxytag="wxPGMultiButton::GetPrimarySize" ></a>
wxSize&nbsp;</td><td class="memItemRight" valign=bottom><b>GetPrimarySize</b> () const </td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top><a class="anchor" name="wxPGMultiButtona6" doxytag="wxPGMultiButton::wxPGMultiButton" ></a>
&nbsp;</td><td class="memItemRight" valign=bottom><b>wxPGMultiButton</b> (<a class="el" href="classwxPropertyGrid.htm">wxPropertyGrid</a> *pg, const wxSize &amp;sz)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This class can be used to have multiple buttons in a property editor. You will need to create a new property editor class, override CreateControls, and have it return wxPGMultiButton instance in wxPGWindowList::SetSecondary(). For instance, here we add three buttons to a textctrl editor:. 
<p>
<pre class="fragment"><div><span class="preprocessor">    #include &lt;wx/propgrid/editors.h&gt;</span>

    <span class="keyword">class </span>wxMultiButtonTextCtrlEditor : <span class="keyword">public</span> wxPGTextCtrlEditor
    {
        WX_PG_DECLARE_EDITOR_CLASS(wxMultiButtonTextCtrlEditor)
    <span class="keyword">public</span>:
        wxMultiButtonTextCtrlEditor() {}
        <span class="keyword">virtual</span> ~wxMultiButtonTextCtrlEditor() {}

        wxPG_DECLARE_CREATECONTROLS
        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnEvent( wxPropertyGrid* propGrid,
                              <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
                              wxWindow* ctrl,
                              wxEvent&amp; event ) <span class="keyword">const</span>;

    };

    WX_PG_IMPLEMENT_EDITOR_CLASS(MultiButtonTextCtrlEditor, wxMultiButtonTextCtrlEditor,
                                 wxPGTextCtrlEditor)

    wxPGWindowList wxMultiButtonTextCtrlEditor::CreateControls( wxPropertyGrid* propGrid,
                                                                <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
                                                                <span class="keyword">const</span> wxPoint&amp; pos,
                                                                <span class="keyword">const</span> wxSize&amp; sz )<span class="keyword"> const</span>
<span class="keyword">    </span>{
        <span class="comment">// Create and populate buttons-subwindow</span>
        <a class="code" href="classwxPGMultiButton.htm">wxPGMultiButton</a>* buttons = <span class="keyword">new</span> <a class="code" href="classwxPGMultiButton.htm">wxPGMultiButton</a>( propGrid, sz );

        <span class="comment">// Add two regular buttons</span>
        buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona0">Add</a>( wxT(<span class="stringliteral">"..."</span>) );
        buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona0">Add</a>( wxT(<span class="stringliteral">"A"</span>) );
        <span class="comment">// Add a bitmap button</span>
        buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona0">Add</a>( wxArtProvider::GetBitmap(wxART_FOLDER) );

        <span class="comment">// Create the 'primary' editor control (textctrl in this case)</span>
        wxPGWindowList wndList = wxPGTextCtrlEditor::CreateControls
                                 ( propGrid, property, pos, buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona5">GetPrimarySize</a>() );

        <span class="comment">// Finally, move buttons-subwindow to correct position and make sure</span>
        <span class="comment">// returned wxPGWindowList contains our custom button list.</span>
        buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona1">FinalizePosition</a>(pos);

        wndList.SetSecondary( buttons );
        <span class="keywordflow">return</span> wndList;
    }

    <span class="keywordtype">bool</span> wxMultiButtonTextCtrlEditor::OnEvent( wxPropertyGrid* propGrid,
                                               <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
                                               wxWindow* ctrl,
                                               wxEvent&amp; event )<span class="keyword"> const</span>
<span class="keyword">    </span>{
        <span class="keywordflow">if</span> ( event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED )
        {
            wxPGMultiButton* buttons = (wxPGMultiButton*) propGrid-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_8">GetEditorControlSecondary</a>();

            <span class="keywordflow">if</span> ( event.GetId() == buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona4">GetButtonId</a>(0) )
            {
                <span class="comment">// Do something when first button is pressed</span>
                <span class="keywordflow">return</span> <span class="keyword">true</span>;
            }
            <span class="keywordflow">if</span> ( event.GetId() == buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona4">GetButtonId</a>(1) )
            {
                <span class="comment">// Do something when first button is pressed</span>
                <span class="keywordflow">return</span> <span class="keyword">true</span>;
            }
            <span class="keywordflow">if</span> ( event.GetId() == buttons-&gt;<a class="code" href="classwxPGMultiButton.htm#wxPGMultiButtona4">GetButtonId</a>(2) )
            {
                <span class="comment">// Do something when second button is pressed</span>
                <span class="keywordflow">return</span> <span class="keyword">true</span>;
            }
        }
        <span class="keywordflow">return</span> wxPGTextCtrlEditor::OnEvent(propGrid, property, ctrl, event);
    }
</div></pre><p>
Further to use this editor, code like this can be used:<p>
<pre class="fragment"><div>        <span class="comment">// Register editor class - needs only to be called once</span>
        wxPGRegisterEditorClass( MultiButtonTextCtrlEditor );

        <span class="comment">// Insert the property that will have multiple buttons</span>
        propGrid-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea1">Append</a>( <span class="keyword">new</span> wxLongStringProperty(wxT(<span class="stringliteral">"MultipleButtons"</span>), wxPG_LABEL) );

        <span class="comment">// Change property to use editor created in the previous code segment</span>
        propGrid-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridPagea142">SetPropertyEditor</a>( wxT(<span class="stringliteral">"MultipleButtons"</span>), wxPG_EDITOR(MultiButtonTextCtrlEditor) );
</div></pre>
<p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="wxPGMultiButtona4" doxytag="wxPGMultiButton::GetButtonId" ></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int wxPGMultiButton::GetButtonId </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">unsigned int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>i</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Utility function to be used in event handlers. 
<p>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li>editors.h</ul>
<hr size="1"><address style="align: right;"><small>Generated on Thu Oct 11 17:25:26 2007 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
