// -*- C++ -*- generated by wxGlade 0.6.1 on Wed Jan  9 19:01:12 2008

#include "convertdialog.h"

#include "prefs.h"

// begin wxGlade: ::extracode
// end wxGlade



ConvertDialog::ConvertDialog(wxWindow* parent):
    wxDialog(parent, wxID_ANY, _("Convert HUD"), wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE)
{
    // begin wxGlade: ConvertDialog::ConvertDialog
    sizer_5_staticbox = new wxStaticBox(this, -1, wxT("Convert To"));
    sizer_6_staticbox = new wxStaticBox(this, -1, wxT("Options"));
    sizer_4_staticbox = new wxStaticBox(this, -1, wxT("Convert From"));
    label_1 = new wxStaticText(this, wxID_ANY, wxT("Aspect ratio:"));
    const wxString m_aspectratio_from_choices[] = {
        wxT("Current"),
        wxT("Standard (4:3)"),
        wxT("Widescreen (16:10)")
    };
    m_aspectratio_from = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 3, m_aspectratio_from_choices, 0);
    label_1_copy = new wxStaticText(this, wxID_ANY, wxT("Aspect ratio:"));
    const wxString m_aspectratio_to_choices[] = {
        wxT("Current"),
        wxT("Standard (4:3)"),
        wxT("Widescreen (16:10)")
    };
    m_aspectratio_to = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 3, m_aspectratio_to_choices, 0);
    m_fontsize = new wxCheckBox(this, wxID_ANY, wxT("Fontsize (keep font width:height ratio)"));
    m_size = new wxCheckBox(this, wxID_ANY, wxT("Size (keep element width:height ratio)"));
    m_stretchposition = new wxCheckBox(this, wxID_ANY, wxT("Stretch position (hihi)"));
    button_1 = new wxButton(this, wxID_OK, wxEmptyString);
    button_2 = new wxButton(this, wxID_CANCEL, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
    if( Prefs::get().var(wxT("view_aspectratio")).sval() == wxT("4:3") )
    {
      m_aspectratio_to->SetSelection(2); // 16:10
    }
    else
      m_aspectratio_to->SetSelection(1); // 4:3
}

double ConvertDialog::convert_from() const
{
  switch(m_aspectratio_from->GetSelection())
  {
    case 1: return 4/3.0;
    case 2: return 16/10.0;
    case 0: // current
    default:
      break;
  }
  return Prefs::get().var(wxT("view_aspectratio")).dval();
}

double ConvertDialog::convert_to() const
{
  switch(m_aspectratio_to->GetSelection())
  {
    case 1: return 4/3.0;
    case 2: return 16/10.0;
    case 0: // current
    default:
      break;
  }
  return Prefs::get().var(wxT("view_aspectratio")).dval();
}

wxString ConvertDialog::convert_to_str() const
{
  switch(m_aspectratio_to->GetSelection())
  {
    case 1: return wxT("4:3");
    case 2: return wxT("16:10");
    case 0: // current
    default:
      break;
  }
  return Prefs::get().var(wxT("view_aspectratio")).sval();
}

bool ConvertDialog::size() const
{
  return m_size->GetValue();
}

bool ConvertDialog::fontsize() const
{
  return m_fontsize->GetValue();
}
bool ConvertDialog::stretchposition() const
{
  return m_stretchposition->GetValue();
}

void ConvertDialog::set_properties()
{
    // begin wxGlade: ConvertDialog::set_properties
    SetTitle(wxT("Convert"));
    m_aspectratio_from->SetSelection(0);
    m_aspectratio_to->SetSelection(0);
    m_fontsize->SetValue(1);
    m_size->SetToolTip(wxT("What "));
    m_size->SetValue(1);
    m_stretchposition->SetValue(1);
    // end wxGlade
}


void ConvertDialog::do_layout()
{
    // begin wxGlade: ConvertDialog::do_layout
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_6 = new wxStaticBoxSizer(sizer_6_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_5 = new wxStaticBoxSizer(sizer_5_staticbox, wxHORIZONTAL);
    wxStaticBoxSizer* sizer_4 = new wxStaticBoxSizer(sizer_4_staticbox, wxHORIZONTAL);
    sizer_4->Add(label_1, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    sizer_4->Add(m_aspectratio_from, 0, wxADJUST_MINSIZE, 5);
    sizer_3->Add(sizer_4, 0, wxALL|wxEXPAND, 5);
    sizer_5->Add(label_1_copy, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxADJUST_MINSIZE, 5);
    sizer_5->Add(m_aspectratio_to, 0, wxADJUST_MINSIZE, 5);
    sizer_3->Add(sizer_5, 0, wxALL|wxEXPAND, 5);
    sizer_6->Add(m_fontsize, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_6->Add(m_size, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_6->Add(m_stretchposition, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_3->Add(sizer_6, 0, wxALL|wxEXPAND, 5);
    sizer_7->Add(20, 20, 1, wxEXPAND|wxADJUST_MINSIZE, 0);
    sizer_7->Add(button_1, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_7->Add(button_2, 0, wxALL|wxADJUST_MINSIZE, 5);
    sizer_3->Add(sizer_7, 0, wxALL|wxEXPAND, 5);
    sizer_2->Add(sizer_3, 1, wxALL|wxEXPAND, 5);
    SetSizer(sizer_2);
    sizer_2->Fit(this);
    Layout();
    // end wxGlade
}









