The application browses this directory (data/hudspecs/) and will pick the last
file (*.dat) after sorting ascending.
(You should name them according to cpma version and then add some var if you want
to overwrite it, like 136veal.dat if you make any changes).
 
You may also set it to a certain file in the preferences or
directly in the config file:


#hudspecs_filename=135.dat




`;' in text preview will be replaced by `:' in the end...
The format of the file itself is as following:

#
# format:
# <element-name>=<option>:<option>:<opt...
#
# if it's a recurring element you can omit the '=' and it will
# use the same options as the previous one (although certain ones
# will be ommitted.)
# (NOTE: not yet working with elemnts that have mult* options...)
#
# element-names starting with __ are ignored.
#
# reserved element-names = ___name ___author ___date __desc
#
# to add a description for the element place __desc on a previous line.
# it will be used by all following elements unless you set it again.
#
# ordering in the Elements Panel is according to listing in hudspecs file.
#
# options
#
#   short
#     save this element all on one line (makes the hud file more 
#     readable especially on similar elements (ChatN, etc)).
#   enable
#     enable element (default is not enabled).
#   enablealways
#     cannot be disabled.
#   notuniq
#     the element is not unique, can be used several times by the user.
#     it will appear in the 'special' menu.
#   nodefault
#     is not considered as being a default item. so you won't see it
#     if you do File->New. (makes only sense to use in conjunction with
#     `notuniq` currently)
#   drawnever
#     never draw this element not even if it's enabled.
#   drawfront
#     will make sure it's drawn in front of elements that do not have that flag.
#   drawback
#     draws the element in the back (first).
#   drawalways
#     draw it always even if it's disabled.
#   parent
#     the element will inherit its contents to the others.
#   noinherit
#     do not inherit from elements that are parent (default they all inherit from inheriters).
#   multheight=<int>
#     the real height (how it's drawn on the screen) will be computed by 
#     multiplying it with this value (see also WeaponList)
#   multwidth=<int>
#     same as multheight but height is multiplied.
#   multdependalign
#     how multheight and multwidth are used depends on textalign.
#     if textalign == 'C' on the element then we use only multwidth,
#     otherwise only multheight (see also WeapopnList).
#   overwrites=<int>
#     by default an element overwrites nothing to the one it inherits from.
#     specify here the default bitmask it should overwrite.
#   text=<string>
#     sample text that is drawn (only available on those type==text).
#   icon=<string>
#     the icon to display (only available onthose type==icon).
#   type=usericon|icon|bar|text|weaponlist
#     those three are differently treated in cpma.. and we need to know which element belongs to which type.
#     (icon = the game itself will supply us with an image, usericon = we can write the image in the hudfile)
