

`;' in text preview will be replaced by `:' before rendering

The format of the file itself is as following:
#
# format:
# <element-name>=<option>:<option>:<opt...
#
# if it's a recurring element you can omit the '=' and it will
# use the same options as the previous one (although certain ones
# will be ommitted.)
#
# names starting with _ are considered to be special vars, 
# i.e. not elements.
#
# reserved element-names = ___name ___author ___date _desc
#
# to add a description for the element place _desc on a previous line.
# it will be used by all following elements unless you set it again.
#
# ordering in the Elements Panel is according to listing in hudspecs file.
# (although it will be reordered if a hud is loaded)
#
# options
#
#   short
#     save this element all on one line (makes the hud file more 
#     readable especially on similar elements (ChatN, etc)).
#   enable
#     enable element (default is not enabled).
#   enablealways
#     cannot be disabled.
#   notuniq
#     the element is not unique, can be used several times by the user.
#     it will appear in the 'special' menu (e.g. !DEFAULT PostDecorate/PreDecorate)
#   nodefault
#     is not considered as being a default item. so you won't see it
#     if you do File->New. (makes only sense to use in conjunction with
#     `notuniq` currently)
#   drawnever
#     never draw this element not even if it's enabled.
#   drawfront
#     will make sure it's drawn in front of elements that do not have that flag.
#   drawback
#     draws the element in the back (first).
#   drawalways
#     draw it always even if it's disabled.
#   parent
#     the element will inherit its contents to the others.
#   noinherit
#     do not inherit from elements that are parent (default they all inherit from inheriters).
#   overwrites=<int>
#     by default an element overwrites nothing to the one it inherits from.
#     specify here the default bitmask it should overwrite.
#   text=<string>
#     sample text that is drawn (only available on those type==text).
#   icon=<string>
#     the icon to display (only available with type=icon).
#   type=usericon|icon|bar|text|weaponlist
#     those three are differently treated in cpma.. and we need to know which element belongs to which type.
#     (icon = the game itself will supply us with an image, usericon = we can write the image in the hudfile)
